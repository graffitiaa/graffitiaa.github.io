<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>成员介绍 :)</title>
    <link href="/2022/11/29/nonono/"/>
    <url>/2022/11/29/nonono/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">班级</th><th align="center">学号</th><th align="center">姓名</th></tr></thead><tbody><tr><td align="center">2022211314</td><td align="center">2022211415</td><td align="center">刘佳婕</td></tr><tr><td align="center">2022211314</td><td align="center">2022211416</td><td align="center">冯雪莹</td></tr><tr><td align="center">2022211314</td><td align="center">2022211417</td><td align="center">李佳玉</td></tr><tr><td align="center">2022211314</td><td align="center">2022211418</td><td align="center">陈露</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一些排序和查找的经典算法</title>
    <link href="/2022/11/26/sortNsearch/"/>
    <url>/2022/11/26/sortNsearch/</url>
    
    <content type="html"><![CDATA[<p><strong>介绍一些经典的数组排序与查找算法</strong>  </p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>除以下外还有桶排序等经典排序算法，此处不做介绍。<br><em>排序以升序为例</em>  </p><h2 id="冒泡排序bubbleSort"><a href="#冒泡排序bubbleSort" class="headerlink" title="冒泡排序bubbleSort"></a>冒泡排序bubbleSort</h2><pre><code class="hljs">void bubbleSort(int a[],int n)</code></pre><p>{<br>    int pass,i,temp;<br>    for(pass&#x3D;1;pass&lt;n;pass++)<br>        for(i&#x3D;0;i&lt;(n-pass);i++)<br>            if(a[i]&gt;a[i+1])<br>            {<br>                temp&#x3D;a[i];<br>                a[i]&#x3D;a[i+1];<br>                a[i+1]&#x3D;temp;<br>            }<br>}</p><h2 id="选择排序selectSort"><a href="#选择排序selectSort" class="headerlink" title="选择排序selectSort"></a>选择排序selectSort</h2><pre><code class="hljs">void selectSortUp(int a[],int n)</code></pre><p>{<br>    int i,j,temp,min;<br>    for(i&#x3D;0;i&lt;(n-1);i++)<br>    {<br>        min&#x3D;findMin(a,i,n-1);<br>        temp&#x3D;a[min];<br>        a[min]&#x3D;a[i];<br>        a[i]&#x3D;temp;<br>    }<br>}</p><p>int findMin(int a[], int startLoc, int endLoc)<br>{<br>    int i,min&#x3D;startLoc;<br>    for(i&#x3D;startLoc+1;i&lt;&#x3D;endLoc;i++)<br>        if(a[i]&lt;a[min])<br>            min&#x3D;i;<br>    return min;<br>}</p><h2 id="插入排序insertSort"><a href="#插入排序insertSort" class="headerlink" title="插入排序insertSort"></a>插入排序insertSort</h2><pre><code class="hljs">void insertSort(int a[],int size)</code></pre><p>{<br>    int i;<br>    for(i&#x3D;1;i&lt;size;i++)<br>    insertElement(a,i+1,a[i]);<br>}</p><p>void insertElement(int a[],int size,int num)<br>{<br>    int i,j;<br>    for(i&#x3D;0;(a[i]&gt;num&amp;&amp;i&lt;size);i++);<br>    for(j&#x3D;size-2;j&gt;&#x3D;i;j–)<br>    a[j+1]&#x3D;a[j];<br>    a[i]&#x3D;num;<br>}</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>除以下外还有分块查找等经典查找算法，此处不做介绍。  </p><h2 id="线性查找linearSearch"><a href="#线性查找linearSearch" class="headerlink" title="线性查找linearSearch"></a>线性查找linearSearch</h2><pre><code class="hljs">int linearSearch(int a[],int key,int size)</code></pre><p>{<br>    int i;<br>    for(i&#x3D;0;i&lt;size;i++)<br>        if(a[i]&#x3D;&#x3D;key)<br>            return i;<br>    return -1;<br>}<br>int findElement(int a[],int startLoc,int endLoc,int element)<br>{<br>    int i;<br>    for(i&#x3D;startLoc;i&lt;&#x3D;endLoc&amp;&amp;a[i]!&#x3D;element;i++);<br>    if(i&lt;&#x3D;endLoc)<br>        return i;<br>    else<br>        return -1;<br>}</p><h2 id="折半查找binarySearch"><a href="#折半查找binarySearch" class="headerlink" title="折半查找binarySearch"></a>折半查找binarySearch</h2><h3 id="一般"><a href="#一般" class="headerlink" title="一般"></a>一般</h3><pre><code class="hljs">int binarySearch(int a[],int key,int low,int high)</code></pre><p>{<br>    int mid;<br>    mid&#x3D;(low+high)&#x2F;2;<br>    while(low&lt;&#x3D;high&amp;&amp;a[mid]!&#x3D;key)<br>    {<br>        if(key&lt;a[mid])<br>            high&#x3D;mid-1;<br>        else<br>            low&#x3D;mid+1;<br>        mid&#x3D;(low+high)&#x2F;2;<br>    }<br>    if(low&gt;high)<br>        return -1;<br>    else<br>        return mid;<br>}</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><pre><code class="hljs">int recurBinarySearch( int a[],int key,int left,int right)</code></pre><p>{<br>    int mid&#x3D;(left+right)&#x2F;2;<br>    if(left&gt;right)<br>        return -1;<br>    else{<br>        if(key&#x3D;&#x3D;a[mid])<br>            return mid;<br>        if(key&lt;a[mid])<br>            return RecurBinarySearch(a,key,left,mid-1);<br>        if(key&gt;a[mid])<br>            return RecurBinarySearch(a,key,mid+1,right);<br>    }<br>}</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
